{ "defaults":
  { "doc":
    [ "A rule to provide defaults."
    , "All CC targets take their defaults for CC, CXX, flags, etc from"
    , "the target [\"CC\", \"defaults\"]. This is probably the only sensible"
    , "use of this rule. As targets form a different root, the defaults"
    , "can be provided without changing this directory."
    ]
  , "target_fields": ["base"]
  , "string_fields":
    [ "CC"
    , "CXX"
    , "CFLAGS"
    , "CXXFLAGS"
    , "ADD_CFLAGS"
    , "ADD_CXXFLAGS"
    , "AR"
    , "PATH"
    ]
  , "imports": {"base-provides": "defaults-base-provides"}
  , "expression":
    { "type": "let*"
    , "bindings":
      [ ["CC", {"type": "FIELD", "name": "CC"}]
      , ["CXX", {"type": "FIELD", "name": "CXX"}]
      , ["CFLAGS", {"type": "FIELD", "name": "CFLAGS"}]
      , ["CXXFLAGS", {"type": "FIELD", "name": "CXXFLAGS"}]
      , ["AR", {"type": "FIELD", "name": "AR"}]
      , ["PATH", {"type": "FIELD", "name": "PATH"}]
      , ["provider", "CC"]
      , [ "CC"
        , { "type": "if"
          , "cond": {"type": "var", "name": "CC"}
          , "then": {"type": "var", "name": "CC"}
          , "else": {"type": "CALL_EXPRESSION", "name": "base-provides"}
          }
        ]
      , ["provider", "CXX"]
      , [ "CXX"
        , { "type": "if"
          , "cond": {"type": "var", "name": "CXX"}
          , "then": {"type": "var", "name": "CXX"}
          , "else": {"type": "CALL_EXPRESSION", "name": "base-provides"}
          }
        ]
      , ["provider", "CFLAGS"]
      , [ "CFLAGS"
        , { "type": "if"
          , "cond": {"type": "var", "name": "CFLAGS"}
          , "then": {"type": "var", "name": "CFLAGS"}
          , "else": {"type": "CALL_EXPRESSION", "name": "base-provides"}
          }
        ]
      , ["provider", "CXXFLAGS"]
      , [ "CXXFLAGS"
        , { "type": "if"
          , "cond": {"type": "var", "name": "CXXFLAGS"}
          , "then": {"type": "var", "name": "CXXFLAGS"}
          , "else": {"type": "CALL_EXPRESSION", "name": "base-provides"}
          }
        ]
      , ["provider", "AR"]
      , [ "AR"
        , { "type": "if"
          , "cond": {"type": "var", "name": "AR"}
          , "then": {"type": "var", "name": "AR"}
          , "else": {"type": "CALL_EXPRESSION", "name": "base-provides"}
          }
        ]
      , ["provider", "ENV"]
      , [ "ENV"
        , { "type": "if"
          , "cond": {"type": "var", "name": "PATH"}
          , "then":
            { "type": "singleton_map"
            , "key": "PATH"
            , "value":
              { "type": "join"
              , "separator": ":"
              , "$1": {"type": "var", "name": "PATH"}
              }
            }
          , "else": {"type": "CALL_EXPRESSION", "name": "base-provides"}
          }
        ]
      , [ "CFLAGS"
        , { "type": "++"
          , "$1":
            [ {"type": "var", "name": "CFLAGS"}
            , {"type": "FIELD", "name": "ADD_CFLAGS"}
            ]
          }
        ]
      , [ "CXXFLAGS"
        , { "type": "++"
          , "$1":
            [ {"type": "var", "name": "CXXFLAGS"}
            , {"type": "FIELD", "name": "ADD_CXXFLAGS"}
            ]
          }
        ]
      ]
    , "body":
      { "type": "RESULT"
      , "provides":
        { "type": "env"
        , "vars": ["CC", "CXX", "CFLAGS", "CXXFLAGS", "AR", "ENV"]
        }
      }
    }
  }
, "library":
  { "doc": ["A C++ library"]
  , "target_fields":
    ["srcs", "hdrs", "private-hdrs", "deps", "private-deps", "proto"]
  , "string_fields":
    [ "name"
    , "stage"
    , "pure C"
    , "defines"
    , "private-defines"
    , "cflags"
    , "private-cflags"
    , "private-ldflags"
    , "pkg-name"
    ]
  , "config_vars":
    [ "CC"
    , "CXX"
    , "CFLAGS"
    , "CXXFLAGS"
    , "ADD_CFLAGS"
    , "ADD_CXXFLAGS"
    , "AR"
    , "ENV"
    ]
  , "implicit": {"defaults": ["defaults"]}
  , "field_doc":
    { "name":
      ["The name of the library (without leading \"lib\" or trailing \".a\")."]
    , "srcs": ["The source files of the library."]
    , "hdrs": ["Any public header files of the library."]
    , "private-hdrs":
      [ "Any header files that only need to be present when compiling the"
      , "source files, but are not needed for any consumer of the library."
      ]
    , "stage":
      [ "The logical location of all header and source files, as well as the"
      , "resulting library file. Individual directory components are joined"
      , "with \"/\"."
      ]
    , "pure C":
      [ "If non-empty, compile as C sources rather than C++ sources."
      , "In particular, CC is used to compile rather than CXX (or their"
      , "respective defaults)."
      ]
    , "defines":
      [ "List of defines set for this target and its consumers."
      , "Each list entry will be prepended by \"-D\"."
      ]
    , "private-defines":
      [ "List of defines set for source files local to this target."
      , "Each list entry will be prepended by \"-D\"."
      ]
    , "cflags":
      ["List of compile flags set for this target and its consumers."]
    , "private-cflags":
      ["List of compile flags set for source files local to this target."]
    , "private-ldflags":
      [ "Additional linker flags for linking external libraries (not built"
      , "by this tool, typically system libraries)."
      ]
    , "deps": ["Any other libraries this library depends upon."]
    , "private-deps":
      [ "Any other libraries this library depends upon but does not include"
      , "in its public headers."
      ]
    , "proto":
      [ "Any [\"proto\", \"library\"] this target depends upon directly."
      , "The creation of C++ bindings for this proto library as well as of"
      , "its dependencies will be taken care of (as anonymous targets, so no"
      , "duplicate work will be carried out, even if the same proto library"
      , "is used at various places)."
      ]
    , "pkg-name":
      [ "Name to use for pkg-config files. If this field is empty, the field"
      , "\"name\" is used instead."
      ]
    }
  , "config_doc":
    { "CC":
      [ "The name of the C compiler to be used (when compiling pure C code)."
      , "If None, the respective value from [\"CC\", \"defaults\"] will be taken."
      ]
    , "CXX":
      [ "The name of the C++ compiler to be used."
      , "If None, the respective value from [\"CC\", \"defaults\"] will be taken."
      ]
    , "CFLAGS":
      [ "The flags for CC to be used instead of the default ones."
      , "For libraries that should be built in a non-standard way; usually"
      , "adapting the default target [\"CC\", \"defaults\"] is the better"
      , "choice."
      ]
    , "CXXFLAGS":
      [ "The flags for CXX to be used instead of the default ones."
      , "For libraries that should be built in a non-standard way; usually"
      , "adapting the default target [\"CC\", \"defaults\"] is the better"
      , "choice."
      ]
    , "ADD_CFLAGS":
      [ "The flags to add to the default ones for CC."
      , "For libraries that should be built in a non-standard way; usually"
      , "adapting the default target [\"CC\", \"defaults\"] is the better"
      , "choice."
      ]
    , "ADD_CXXFLAGS":
      [ "The flags to add to the default ones for CXX."
      , "For libraries that should be built in a non-standard way; usually"
      , "adapting the default target [\"CC\", \"defaults\"] is the better"
      , "choice."
      ]
    , "AR":
      [ "The archive tool to used for creating the library"
      , "If None, the respective value from [\"CC\", \"defaults\"] will be taken."
      ]
    , "ENV": ["The environment for any action generated."]
    }
  , "artifacts_doc":
    ["The actual library (libname.a) staged in the specified directory"]
  , "runfiles_doc": ["The public headers of this library"]
  , "provides_doc":
    { "compile-deps":
      [ "Map of artifacts specifying any additional files that, besides the runfiles,"
      , "have to be present in compile actions of targets depending on this library"
      ]
    , "link-deps":
      [ "Map of artifacts specifying any additional files that, besides the artifacts,"
      , "have to be present in a link actions of targets depending on this library"
      ]
    , "link-args":
      [ "List of strings that have to be added to the command line for linking actions"
      , "in targets depending on this library"
      ]
    }
  , "anonymous":
    { "proto-deps":
      { "target": "proto"
      , "provider": "proto"
      , "rule_map":
        { "library": ["./", "proto", "library"]
        , "service library": ["./", "proto", "service library"]
        }
      }
    }
  , "imports":
    {"artifacts": ["./", "..", "field_artifacts"], "result": "lib result"}
  , "expression":
    { "type": "let*"
    , "bindings":
      [ ["name", {"type": "join", "$1": {"type": "FIELD", "name": "name"}}]
      , ["pure C", {"type": "FIELD", "name": "pure C"}]
      , [ "cflags"
        , { "type": "++"
          , "$1":
            [ {"type": "FIELD", "name": "cflags"}
            , { "type": "foreach"
              , "var": "def"
              , "range": {"type": "FIELD", "name": "defines"}
              , "body":
                {"type": "join", "$1": ["-D", {"type": "var", "name": "def"}]}
              }
            ]
          }
        ]
      , [ "private-cflags"
        , { "type": "++"
          , "$1":
            [ {"type": "FIELD", "name": "private-cflags"}
            , { "type": "foreach"
              , "var": "def"
              , "range": {"type": "FIELD", "name": "private-defines"}
              , "body":
                {"type": "join", "$1": ["-D", {"type": "var", "name": "def"}]}
              }
            ]
          }
        ]
      , [ "stage"
        , { "type": "join"
          , "separator": "/"
          , "$1": {"type": "FIELD", "name": "stage"}
          }
        ]
      , [ "srcs"
        , { "type": "to_subdir"
          , "subdir": {"type": "var", "name": "stage"}
          , "$1":
            { "type": "let*"
            , "bindings": [["fieldname", "srcs"]]
            , "body": {"type": "CALL_EXPRESSION", "name": "artifacts"}
            }
          }
        ]
      , [ "hdrs"
        , { "type": "to_subdir"
          , "subdir": {"type": "var", "name": "stage"}
          , "$1":
            { "type": "let*"
            , "bindings": [["fieldname", "hdrs"]]
            , "body": {"type": "CALL_EXPRESSION", "name": "artifacts"}
            }
          }
        ]
      , [ "private-hdrs"
        , { "type": "to_subdir"
          , "subdir": {"type": "var", "name": "stage"}
          , "$1":
            { "type": "let*"
            , "bindings": [["fieldname", "private-hdrs"]]
            , "body": {"type": "CALL_EXPRESSION", "name": "artifacts"}
            }
          }
        ]
      , ["private-ldflags", {"type": "FIELD", "name": "private-ldflags"}]
      , [ "pkg-name"
        , { "type": "if"
          , "cond": {"type": "FIELD", "name": "pkg-name"}
          , "then":
            {"type": "join", "$1": {"type": "FIELD", "name": "pkg-name"}}
          , "else": {"type": "var", "name": "name"}
          }
        ]
      , ["public-fieldnames", ["deps", "proto-deps"]]
      , ["private-fieldnames", ["deps", "private-deps", "proto-deps"]]
      ]
    , "body": {"type": "CALL_EXPRESSION", "name": "result"}
    }
  }
, "binary":
  { "doc": ["A binary written in C++"]
  , "target_fields": ["srcs", "private-hdrs", "private-deps", "private-proto"]
  , "string_fields":
    [ "name"
    , "stage"
    , "pure C"
    , "private-defines"
    , "private-cflags"
    , "private-ldflags"
    ]
  , "config_vars":
    ["CC", "CXX", "CFLAGS", "CXXFLAGS", "ADD_CFLAGS", "ADD_CXXFLAGS", "ENV"]
  , "implicit": {"defaults": ["defaults"]}
  , "field_doc":
    { "name": ["The name of the binary"]
    , "srcs": ["The source files of the library."]
    , "private-hdrs":
      [ "Any header files that need to be present when compiling the"
      , "source files."
      ]
    , "stage":
      [ "The logical location of all header and source files, as well as the"
      , "resulting binary file. Individual directory components are joined"
      , "with \"/\"."
      ]
    , "pure C":
      [ "If non-empty, compile as C sources rathter than C++ sources."
      , "In particular, CC is used to compile rather than CXX"
      ]
    , "private-defines":
      [ "List of defines set for source files local to this target."
      , "Each list entry will be prepended by \"-D\"."
      ]
    , "private-cflags":
      ["List of compile flags set for source files local to this target."]
    , "private-ldflags":
      ["Additional linker flags for linking external libraries."]
    , "private-deps": ["Any other libraries this binary depends upon."]
    , "private-proto":
      [ "Any [\"proto\", \"library\"] this target depends upon directly."
      , "The creation of C++ bindings for this proto library as well as of"
      , "is dependencies will be taken care of (as anonymous targets, so no"
      , "duplicate work will be carried out, even if the same proto library"
      , "is used at various places)."
      ]
    }
  , "config_doc":
    { "CC":
      ["The name of the C compiler to be used (when compiling pure C code)"]
    , "CXX": ["The name of the C++ compiler to be used."]
    , "CFLAGS":
      [ "The flags for CXX to be used instead of the default ones"
      , "taken from the [\"CC\", \"defaults\"] target"
      ]
    , "CXXFLAGS":
      [ "The flags for CXX to be used instead of the default ones"
      , "taken from the [\"CC\", \"defaults\"] target"
      ]
    , "ADD_CFLAGS":
      [ "The flags to add to the default ones for CC"
      , "taken from the [\"CC\", \"defaults\"] target"
      ]
    , "ADD_CXXFLAGS":
      [ "The flags to add to the default ones for CXX"
      , "taken from the [\"CC\", \"defaults\"] target"
      ]
    , "ENV": ["The environment for any action generated."]
    }
  , "artifacts_doc": ["The final binary, staged to the given directory"]
  , "runfiles_doc": ["None"]
  , "anonymous":
    { "private-proto-deps":
      { "target": "private-proto"
      , "provider": "proto"
      , "rule_map":
        { "library": ["./", "proto", "library"]
        , "service library": ["./", "proto", "service library"]
        }
      }
    }
  , "imports":
    {"artifacts": ["./", "..", "field_artifacts"], "bin result": "bin result"}
  , "expression":
    { "type": "let*"
    , "bindings":
      [ [ "name"
        , { "type": "assert_non_empty"
          , "msg": "A non-empty name has to be provided for binaries"
          , "$1": {"type": "join", "$1": {"type": "FIELD", "name": "name"}}
          }
        ]
      , ["pure C", {"type": "FIELD", "name": "pure C"}]
      , [ "stage"
        , { "type": "join"
          , "separator": "/"
          , "$1": {"type": "FIELD", "name": "stage"}
          }
        ]
      , [ "srcs"
        , { "type": "to_subdir"
          , "subdir": {"type": "var", "name": "stage"}
          , "$1":
            { "type": "let*"
            , "bindings": [["fieldname", "srcs"]]
            , "body": {"type": "CALL_EXPRESSION", "name": "artifacts"}
            }
          }
        ]
      , [ "private-hdrs"
        , { "type": "to_subdir"
          , "subdir": {"type": "var", "name": "stage"}
          , "$1":
            { "type": "let*"
            , "bindings": [["fieldname", "private-hdrs"]]
            , "body": {"type": "CALL_EXPRESSION", "name": "artifacts"}
            }
          }
        ]
      , [ "private-cflags"
        , { "type": "++"
          , "$1":
            [ { "type": "foreach"
              , "var": "def"
              , "range": {"type": "FIELD", "name": "private-defines"}
              , "body":
                {"type": "join", "$1": ["-D", {"type": "var", "name": "def"}]}
              }
            , {"type": "FIELD", "name": "private-cflags"}
            ]
          }
        ]
      , ["private-ldflags", {"type": "FIELD", "name": "private-ldflags"}]
      , ["private-fieldnames", ["private-deps", "private-proto-deps"]]
      ]
    , "body": {"type": "CALL_EXPRESSION", "name": "bin result"}
    }
  }
, "install-with-deps":
  { "doc":
    [ "Install target's artifacts with transitive dependencies. Depending on"
    , "the target, artifacts and dependencies will be installed to"
    , "subdirectories \"bin\", \"include\", and \"lib\". For library targets,"
    , "a pkg-config file is generated and provided in \"share/pkgconfig\"."
    ]
  , "config_vars": ["PREFIX"]
  , "target_fields": ["targets"]
  , "string_fields": ["flat-libs", "prefix"]
  , "imports":
    { "compile-deps": "compile-deps"
    , "compile-args-deps": "compile-args-deps"
    , "link-deps": "link-deps"
    , "link-args-deps": "link-args-deps"
    , "pkg-config": "pkg-config"
    }
  , "field_doc":
    { "targets": ["Targets to install artifacts from."]
    , "flat-libs":
      [ "Install libraries flat to the \"lib\" subdirectory. Be aware that"
      , "conflicts may occur if any of the (transitive) libraries happen to"
      , "have the same base name."
      ]
    , "prefix":
      [ "The prefix used for pkg-config files. The path will be made absolute"
      , "and individual directory components are joined with \"/\". If no"
      , "prefix is specified, the value from the config variable \"PREFIX\" is"
      , "taken, with the default value being \"/\"."
      ]
    }
  , "config_doc":
    { "PREFIX":
      [ "The absolute path that is used as prefix inside generated pkg-config"
      , "files. The default value for this variable is \"/\". This variable"
      , "is ignored if the field \"prefix\" is set."
      ]
    }
  , "artifacts_doc":
    ["Installed artifacts in subdirectories (\"bin\"/\"include\"/\"lib\")."]
  , "expression":
    { "type": "let*"
    , "bindings":
      [ ["pc-install-dir", "share/pkgconfig"]
      , [ "install-stage"
        , { "type": "disjoint_map_union"
          , "msg": "install stages may not overlap"
          , "$1":
            { "type": "foreach"
            , "var": "target"
            , "range": {"type": "FIELD", "name": "targets"}
            , "body":
              { "type": "let*"
              , "bindings":
                [ [ "artifacts"
                  , { "type": "DEP_ARTIFACTS"
                    , "dep": {"type": "var", "name": "target"}
                    , "default": {"type": "empty_map"}
                    }
                  ]
                , [ "runfiles"
                  , { "type": "DEP_RUNFILES"
                    , "dep": {"type": "var", "name": "target"}
                    , "default": {"type": "empty_map"}
                    }
                  ]
                , [ "compile-deps"
                  , { "type": "DEP_PROVIDES"
                    , "dep": {"type": "var", "name": "target"}
                    , "provider": "compile-deps"
                    , "default": {"type": "empty_map"}
                    }
                  ]
                , [ "link-deps"
                  , { "type": "DEP_PROVIDES"
                    , "dep": {"type": "var", "name": "target"}
                    , "provider": "link-deps"
                    , "default": {"type": "empty_map"}
                    }
                  ]
                , [ "package"
                  , { "type": "DEP_PROVIDES"
                    , "dep": {"type": "var", "name": "target"}
                    , "provider": "package"
                    , "default": {"type": "empty_map"}
                    }
                  ]
                , [ "to_bin"
                  , { "type": "lookup"
                    , "key": "to_bin"
                    , "map": {"type": "var", "name": "package"}
                    }
                  ]
                , [ "binaries"
                  , { "type": "if"
                    , "cond": {"type": "var", "name": "to_bin"}
                    , "then": {"type": "var", "name": "artifacts"}
                    , "else": {"type": "empty_map"}
                    }
                  ]
                , [ "headers"
                  , { "type": "disjoint_map_union"
                    , "msg": "headers may not overlap"
                    , "$1":
                      [ {"type": "var", "name": "runfiles"}
                      , {"type": "var", "name": "compile-deps"}
                      ]
                    }
                  ]
                , [ "libraries"
                  , { "type": "disjoint_map_union"
                    , "msg": "libraries may not overlap"
                    , "$1":
                      { "type": "++"
                      , "$1":
                        [ { "type": "if"
                          , "cond": {"type": "var", "name": "to_bin"}
                          , "then": []
                          , "else": [{"type": "var", "name": "artifacts"}]
                          }
                        , [{"type": "var", "name": "link-deps"}]
                        ]
                      }
                    }
                  ]
                , [ "pkg-name"
                  , { "type": "lookup"
                    , "key": "name"
                    , "map": {"type": "var", "name": "package"}
                    }
                  ]
                , [ "pkg-config"
                  , { "type": "if"
                    , "cond": {"type": "var", "name": "pkg-name"}
                    , "then":
                      { "type": "let*"
                      , "bindings":
                        [ [ "pkg-prefix"
                          , { "type": "if"
                            , "cond": {"type": "FIELD", "name": "prefix"}
                            , "then":
                              { "type": "join"
                              , "separator": "/"
                              , "$1":
                                { "type": "++"
                                , "$1":
                                  [[""], {"type": "FIELD", "name": "prefix"}]
                                }
                              }
                            , "else":
                              {"type": "var", "name": "PREFIX", "default": "/"}
                            }
                          ]
                        , [ "pkg-version"
                          , { "type": "lookup"
                            , "key": "version"
                            , "map": {"type": "var", "name": "package"}
                            }
                          ]
                        , [ "pkg-cflags"
                          , { "type": "DEP_PROVIDES"
                            , "dep": {"type": "var", "name": "target"}
                            , "provider": "compile-args"
                            , "default": []
                            }
                          ]
                        , [ "pkg-ldflags"
                          , { "type": "++"
                            , "$1":
                              [ { "type": "DEP_PROVIDES"
                                , "dep": {"type": "var", "name": "target"}
                                , "provider": "link-args"
                                , "default": []
                                }
                              ]
                            }
                          ]
                        , [ "pkg-flag-files"
                          , { "type": "map_union"
                            , "$1":
                              [ { "type": "lookup"
                                , "key": "cflags-files"
                                , "map": {"type": "var", "name": "package"}
                                , "default": {"type": "empty_map"}
                                }
                              , { "type": "lookup"
                                , "key": "ldflags-files"
                                , "map": {"type": "var", "name": "package"}
                                , "default": {"type": "empty_map"}
                                }
                              ]
                            }
                          ]
                        , ["pkg-libs", {"type": "var", "name": "libraries"}]
                        , ["flat-libs", {"type": "FIELD", "name": "flat-libs"}]
                        ]
                      , "body":
                        { "type": "map_union"
                        , "$1":
                          [ {"type": "CALL_EXPRESSION", "name": "pkg-config"}
                          , {"type": "var", "name": "pkg-flag-files"}
                          ]
                        }
                      }
                    , "else": {"type": "empty_map"}
                    }
                  ]
                ]
              , "body":
                { "type": "map_union"
                , "$1":
                  [ { "type": "to_subdir"
                    , "subdir": "bin"
                    , "flat": true
                    , "msg": "install binaries may not overlap"
                    , "$1": {"type": "var", "name": "binaries"}
                    }
                  , { "type": "to_subdir"
                    , "subdir": "include"
                    , "$1": {"type": "var", "name": "headers"}
                    }
                  , { "type": "to_subdir"
                    , "subdir": "lib"
                    , "flat": {"type": "FIELD", "name": "flat-libs"}
                    , "msg": "install libraries may not overlap"
                    , "$1": {"type": "var", "name": "libraries"}
                    }
                  , { "type": "to_subdir"
                    , "subdir": {"type": "var", "name": "pc-install-dir"}
                    , "$1": {"type": "var", "name": "pkg-config"}
                    }
                  ]
                }
              }
            }
          }
        ]
      ]
    , "body":
      {"type": "RESULT", "artifacts": {"type": "var", "name": "install-stage"}}
    }
  }
}
