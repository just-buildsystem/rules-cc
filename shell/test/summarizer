#!/usr/bin/env python3
# Copyright 2022 Huawei Cloud Computing Technology Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import time

from typing import Any, Dict, List

g_RESULTS: Dict[str, List[Any]] = {}
g_COUNT: float = 0

time_start: float = time.time()
time_stop: float = 0

for attempt in os.listdir("."):
    if os.path.isdir(attempt):
        g_COUNT += 1
        with open(os.path.join(attempt, "result")) as f:
            result = f.read().strip()
        g_RESULTS[result] = g_RESULTS.get(result, []) + [int(attempt)]
        try:
            with open(os.path.join(attempt, "time-start")) as f:
                time_start = min(time_start, float(f.read().strip()))
        except:
            pass
        try:
            with open(os.path.join(attempt, "time-stop")) as f:
                time_stop = max(time_start, float(f.read().strip()))
        except:
            pass

result: str = "UNKNOWN"
if set(g_RESULTS.keys()) <= set(["PASS", "FAIL"]):
    if not g_RESULTS.get("FAIL"):
        result = "PASS"
    elif not g_RESULTS.get("PASS"):
        result = "FAIL"
    else:
        result = "FLAKY"
with open("result", "w") as f:
    f.write("%s\n" % (result, ))

with open("time-start", "w") as f:
    f.write("%d\n" % (time_start, ))
with open("time-stop", "w") as f:
    f.write("%d\n" % (time_stop, ))

with open("stdout", "w") as f:
    f.write("Summary: %s\n\n" % (result, ))
    f.write("PASS: %s\n" % (sorted(g_RESULTS.get("PASS", [])), ))
    failures =sorted(g_RESULTS.get("FAIL", []))
    f.write("FAIL: %s\n" % (failures, ))
    g_RESULTS.pop("PASS", None)
    g_RESULTS.pop("FAIL", None)
    if g_RESULTS:
        f.write("\nother results: %r\n" % (g_RESULTS, ))
    if result == "FLAKY":
        f.write("\nFailure rate %5.2f%%\n" % (100.0 * len(failures) / g_COUNT))

with open("stderr", "w") as f:
    pass
